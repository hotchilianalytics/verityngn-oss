import logging
import os
import json
from typing import Dict, Any, Optional
from datetime import datetime
import pathlib
import re
import markdown
from pathlib import Path

from markdown_it import MarkdownIt
from mdit_py_plugins.front_matter import front_matter_plugin
from mdit_py_plugins.footnote import footnote_plugin
from mdit_py_plugins.deflist import deflist_plugin
from mdit_py_plugins.tasklists import tasklists_plugin
from mdit_py_plugins.attrs import attrs_plugin

from verityngn.models.report import VerityReport
from verityngn.models.workflow import InitialAnalysisState
from verityngn.config.settings import OUTPUTS_DIR, COMPARE_DIR, DOWNLOADS_DIR, TEMPLATE_PATH, DEBUG_OUTPUTS
from .markdown_generator import generate_markdown_report
from .report_utils import generate_html_from_markdown

# Configure logger
logger = logging.getLogger(__name__)

def generate_simple_html_report(report_data: Dict[str, Any], video_id: str, output_dir: str) -> str:
    """
    Generate a simple HTML report from the final report data using MarkdownIt directly.
    This is an alternative to generate_html_report that avoids potential parameter conflicts.
    
    Args:
        report_data (Dict[str, Any]): The final report data
        video_id (str): ID of the video
        output_dir (str): Directory to save the HTML report
        
    Returns:
        str: Path to the generated HTML report
    """
    logger.info(f"Generating simple HTML report for video: {video_id}")
    
    # Create output directory if it doesn't exist
    os.makedirs(os.path.join(output_dir, video_id), exist_ok=True)
    
    try:
        # Initialize the Markdown parser with desired plugins
        md = (
            MarkdownIt("gfm-like", {"html": True, "linkify": True, "typographer": True})
            .use(front_matter_plugin)
            .use(footnote_plugin)
            .use(deflist_plugin)
            .use(tasklists_plugin)
            .use(attrs_plugin)
        )
        
        # Convert report data to VerityReport model
        logger.debug(f"Converting report data to VerityReport model, report_data keys: {report_data.keys()}")
        report = VerityReport(**report_data)
        
        # Generate markdown
        markdown_content = report.to_markdown()
        
        # Save raw markdown to file for debugging
        md_path = os.path.join(output_dir, f"{video_id}", f"{video_id}_final_report.md")
        with open(md_path, "w", encoding="utf-8") as f:
            f.write(markdown_content)
        logger.debug(f"Saved raw markdown to: {md_path}")
        
        # Convert markdown to HTML using MarkdownIt
        html_body = md.render(markdown_content)
        logger.debug(f"Converted markdown to HTML, length: {len(html_body)}")
        
        # Create a basic HTML wrapper
        html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verity Report - {video_id}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f9f9f9;
        }}
        h1, h2, h3, h4 {{
            color: #2c3e50;
            margin-top: 1.5em;
        }}
        h1 {{
            font-size: 2.2em;
            border-bottom: 2px solid #eaecef;
            padding-bottom: 0.3em;
        }}
        h2 {{
            font-size: 1.8em;
            border-bottom: 1px solid #eaecef;
            padding-bottom: 0.3em;
        }}
        h3 {{
            font-size: 1.4em;
        }}
        a {{
            color: #0366d6;
            text-decoration: none;
        }}
        a:hover {{
            text-decoration: underline;
        }}
        pre {{
            background-color: #f6f8fa;
            border-radius: 3px;
            padding: 16px;
            overflow: auto;
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 1em;
        }}
        th, td {{
            border: 1px solid #dfe2e5;
            padding: 8px 12px;
            text-align: left;
        }}
        th {{
            background-color: #f6f8fa;
        }}
        footer {{
            margin-top: 30px;
            text-align: center;
            color: #6c757d;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <div class="container">
        {html_body}
        <footer>
            <p>Generated by VerityNgn on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </footer>
    </div>
</body>
</html>
"""
        
        # Save HTML to file
        html_path = os.path.join(output_dir, f"{video_id}_final_report.html")
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html_content)
        
        logger.info(f"Simple HTML report generated: {html_path}")
        return html_path
        
    except Exception as e:
        logger.error(f"Error generating simple HTML report: {e}")
        raise Exception(f"Error generating simple HTML report: {e}")

def generate_html_report(report: VerityReport) -> str:
    """Generate HTML report from VerityReport using Jinja2."""
    try:
        from jinja2 import Environment, FileSystemLoader, select_autoescape
        from datetime import datetime # Ensure datetime is available
        
        logger.debug(f"Template path: {TEMPLATE_PATH}")
        logger.debug(f"Template path exists: {TEMPLATE_PATH.exists()}")
        
        # Read the template file content
        with open(TEMPLATE_PATH, 'r', encoding='utf-8') as f:
            template_string_content = f.read()
        logger.debug(f"Template content length: {len(template_string_content)}")
        
        # Create Jinja environment
        env = Environment(
            loader=FileSystemLoader(str(TEMPLATE_PATH.parent)),
            autoescape=select_autoescape(['html', 'xml'])
        )
        
        # Add modules to Jinja environment for date formatting
        env.globals['modules'] = {
            'datetime': datetime
        }
        
        # Load the template from the string content we read earlier
        template = env.from_string(template_string_content)
        
        # Generate markdown content
        markdown_content, _, _ = generate_markdown_report(report)
        
        # Convert markdown to HTML using MarkdownIt
        md = (
            MarkdownIt("gfm-like", {"html": True, "linkify": True, "typographer": True})
            .use(front_matter_plugin)
            .use(footnote_plugin)
            .use(deflist_plugin)
            .use(tasklists_plugin)
            .use(attrs_plugin)
        )
        html_content = md.render(markdown_content)
        
        # Render the template with both report and content
        html_content = template.render(report=report, content=html_content)
        logger.debug(f"Generated HTML content length: {len(html_content)}")
        
        return html_content
        
    except ImportError:
        logger.error("Jinja2 not installed. Please install it to generate HTML reports.")
        return "<p>Error: Jinja2 is required to generate HTML reports.</p>"
    except Exception as e:
        logger.error(f"Error generating HTML report: {str(e)}", exc_info=True)
        return f"<p>Error generating HTML report: {str(e)}</p>"

# Function aliases for backward compatibility
def convert_md_to_styled_html(markdown_content: str, video_id: str) -> str:
    """Alias to the utils/html_utils.py function for backward compatibility"""
    # This function is likely obsolete now if generate_html_report is the primary entry point
    # and html_utils.convert_md_to_styled_html is no longer used directly by it.
    # Consider removing or marking as deprecated if appropriate.
    logger.warning("Using compatibility wrapper convert_md_to_styled_html, which may be obsolete.")
    # Re-implement using MarkdownIt for consistency or raise NotImplementedError
    md = MarkdownIt("gfm-like") # Basic instance
    html_body = md.render(markdown_content)
    # Doesn't include the full HTML wrapper or styling here...
    # Returning raw body for now, but this function's purpose needs review.
    return html_body

def extract_summary(markdown_content: str) -> str:
    """
    Extract the summary from the markdown content.
    
    Args:
        markdown_content (str): Markdown content
        
    Returns:
        str: Summary text
    """
    try:
        # Look for the summary section
        import re
        summary_pattern = r'## Summary\s+(.*?)(?=\n##|\Z)'
        match = re.search(summary_pattern, markdown_content, re.DOTALL)
        
        if match:
            summary = match.group(1).strip()
            # Clean up the summary
            summary = re.sub(r'\n+', ' ', summary)
            return summary
            
        # If no summary section, look for the first paragraph
        first_para_pattern = r'^(.*?)(?=\n\n|\Z)'
        match = re.search(first_para_pattern, markdown_content, re.DOTALL)
        
        if match:
            return match.group(1).strip()
            
        return "No summary available."
        
    except Exception as e:
        logging.error(f"Error extracting summary: {e}")
        return "No summary available." 